
https://www.facebook.com/hackercup/problems.php?pid=193964420699886&round=323882677799153

Lazy Sort

Much to Mr. Book's amazement, his entire first-grade math class has completed the enormous amount of homework that he assigned only the day before. Being hyperactive little kids, the grade-schoolers have dumped their homework, one page per student, unceremoniously in a pile on Mr. Book's desk.

There are N students in Mr. Book's class, and they each have a distinct integer student ID from 1 to N. Mr. Book wants the homework to be sorted by student ID with the page from student #1 at the top, all the way down to the page from student #N at the bottom. As we know, Mr. Book is a lazy fellow. He's not going to put much effort into sorting the pile himself.

As he considers the pile before him, Mr. Book decides that he'll sort the homework as follows: Every time he moves a page, he'll only move it from the original pile to his finished stack, which initially starts empty. Furthermore, he'll only move the top or bottom page of the remaining original pile, and he'll only place it on the top or bottom of his neat destination stack.

Is it possible for Mr. Book to sort the homework with such a method?

Input
Input begins with an integer T, the number of test cases. For each case, there are two lines. The first contains the integer N. The second contains a permutation of the integers from 1 to N. These are the students' IDs in the order their homework appears in the pile, from bottom to top.

Output
For the ith case, print a line containing "Case #i: " followed by "yes" if Mr. Book can sort the homework by student ID, or "no" if he can't.

Constraints
1 ≤ T ≤ 20 
1 ≤ N ≤ 50,000 
Explanation of Sample
In the first case, Mr. Book can just keep moving the top of the pile to the top of his final stack, which will reverse the order of the pages.

In the fourth case, one approach is for Mr. Book to move pages 4, 3, 2, and 1 to the top of his final stack, and then move 5 and 6 to the bottom.

Example input
5
4
1 2 3 4
4
1 3 2 4
9
2 4 3 1 5 9 6 7 8
6
4 3 2 1 6 5
5
3 4 5 1 2

Example output
Case #1: yes
Case #2: no
Case #3: no
Case #4: yes
Case #5: yes


All Critical

In the game Theatrhythm Final Fantasy, you poke a screen with a stick to the beat of various songs. The goal is to poke the screen as accurately as possible. If you hit a note at just the right time, you're awarded a critical. Every song is broken into 20 sections, and if you get a critical on every note in a section, then you get that section's golden critical bar.

You would like to collect all 20 critical bars for every song. Songs vary in difficulty, but each song has a fixed probability p, which is the chance that you manage to secure any one critical bar on a single playthrough. The chances are independent, so for any given pair of sections, the probability of getting both critical bars in a single playthrough is p2, and so on. Critical bars are saved between playthroughs, so you don't have to win all of the critical bars in a single play of the song. You might win the first 10 on one play, and then the last 10 on another.

On average, how many times will you have to play a song to win all 20 critical bars?

Input
Input begins with an integer T, the number of songs you'll play. For each song, there is a line containing a floating point number, p, the probability of winning any particular critical bar on a single play of the song.

Output
For each song, output the expected number of times you need to play the song before acquiring all 20 critical bars, rounded to five decimal points.

Absolute errors of up to 10-5 will be ignored.

Constraints
1 ≤ T ≤ 20 
0.01 ≤ p ≤ 1.0 
Example input
5
0.1
0.12
0.123
0.1234
0.12345

Example output
Case #1: 34.64694
Case #2: 28.64398
Case #3: 27.91171
Case #4: 27.81676
Case #5: 27.80493


Autocomplete Strikes Back

This morning you woke up with an uncontrollable urge to send a text message made up of K distinct words. But, can you believe it? Your new phone just crashed and all of the words are missing from its dictionary! You used to have N words in there, and you certainly don't have time to add all of them back right now.

Your plan is to just choose K of the N possible words, add them to your phone's dictionary, and then text each of them. To text a certain word, you must either type the word itself, or any nonempty prefix of it which is not a prefix of any other word in the dictionary.

What's the minimum number of letters you must type to send your message of K words?

Input
Input begins with an integer T, the number of test cases. For each test case, there is first a line containing the space-separated integers N and K. Then, N lines follow, each containing a word that used to be in your phone's dictionary.

Output
For the ith test case, print a line containing "Case #i: " followed by the minimum number of characters you need to type to send your text message.

Constraints
1 ≤ T ≤ 20 
2 ≤ N ≤ 4,000 
1 ≤ K ≤ min(N-1, 100) 
The N words will have a total length of no more than 20,000 characters. 
The words are made up of only lower-case alphabetic characters. 
The words are pairwise distinct. 
Explanation of Sample
In the first case, one option is to choose the words "tin", "tinny", "gigantic", and "tilts". You can then text these words by typing "tin", "tinn", "g", and "til", respectively, for a total of 3+4+1+3=11 letters.

Example input
5
6 4
tin
tiny
tinny
gigantic
tilt
tilts
3 2
apple
apricot
cherry
5 3
a
aa
aaa
aaaa
aaaaa
5 3
the
quick
brown
fox
jumped
8 7
cork
work
card
ward
font
front
word
sword

Example output
Case #1: 11
Case #2: 2
Case #3: 6
Case #4: 3
Case #5: 13


Fox Socks


Mr. Fox sure loves his socks! He stores his many indistinguishable socks in a set of N bins, which are arranged in a circle and numbered in clockwise order. For every 1 ≤ i < N, the next bin clockwise of bin i is bin i+1, and the next bin clockwise of bin N is bin 1. Initially, the ith bin contains Si socks.

Never being quite satisfied with his sock collection, Mr. Fox would like to perform M operations on it, one after another. Each operation i may be of one of the following 4 types, determined by the value of Oi:

Given integers Ai, Bi, Ci, and Di, add Ci + 0*Di socks to bin Ai, add Ci + 1*Di socks to the next bin clockwise of bin Ai, add Ci + 2*Di to the next bin clockwise of that one, and so on until this has been done for Bi bins. Determine the total number of socks added in this process.

Given integers Ai, Bi, and Ci, remove all of the socks from bin Ai and then add Ci socks to it. Do the same for the next bin clockwise of Ai, and so on until this has been done for Bi bins. Determine the sum of two values: the total number of socks removed in this process, and the total number of socks added in this process.

Given integers Ai and Bi, count the number of socks in bin Ai (without removing them), the number of socks in the next bin clockwise of Ai, and so on until the socks in Bi bins have been counted. Determine the total number of socks counted in this process.

Given integers Ai and Bi, check if bin Ai contains an odd number of socks. Do the same for the next bin clockwise of Ai, and so on until this has been done for Bi bins. Determine the total number of these bins that contain an odd number of socks.

Can you help Mr. Fox keep track of his socks? Note the value calculated during each of the M operations as they're performed, and then output the sum of all M of the values modulo 109.

Input
Input begins with an integer T, the number of sock collections Mr. Fox has. For each sock collection, there are 7 lines containing the following space-separated integers:

N M
S1 S2 XS YS ZS
O1 O2 XO YO ZO
A1 A2 XA YA ZA
B1 B2 XB YB ZB
C1 C2 XC YC ZC
D1 D2 XD YD ZD
The first two elements of each sequence of integers (S, O, A, B, C, and D) are given, and the rest are computed with the following pseudorandom generators:

Si = (XS*Si-2 + YS*Si-1 + ZS) modulo 109, for 3 ≤ i ≤ N
Oi = ((XO*Oi-2 + YO*Oi-1 + ZO) modulo 4) + 1, for 3 ≤ i ≤ M
Ai = ((XA*Ai-2 + YA*Ai-1 + ZA) modulo N) + 1, for 3 ≤ i ≤ M
Bi = ((XB*Bi-2 + YB*Bi-1 + ZB) modulo N) + 1, for 3 ≤ i ≤ M
Ci = (XC*Ci-2 + YC*Ci-1 + ZC) modulo 109, for 3 ≤ i ≤ M
Di = (XD*Di-2 + YD*Di-1 + ZD) modulo 109, for 3 ≤ i ≤ M
Output
For the ith sock collection, print a line containing "Case #i: " followed by the sum of all values calculated during each operation, modulo 109.

Constraints
1 ≤ T ≤ 20 
2 ≤ N ≤ 1,000,000 
2 ≤ M ≤ 1,000,000 
0 ≤ Si < 109 
1 ≤ Oi ≤ 4 
1 ≤ Ai ≤ N 
1 ≤ Bi ≤ N 
0 ≤ Ci < 109 
0 ≤ Di < 109 
0 ≤ XS, XO, XA XB, XC, XD < 109 
0 ≤ YS, YO, YA YB, YC, YD < 109 
0 ≤ ZS, ZO, ZA ZB, ZC, ZD < 109 
Explanation of Sample
The first collection has 5 bins that all have 0 socks. None of the operations involve any socks at all, so the answer is 0.

The second collection has 5 bins with 1, 2, 3, 4, and 5 socks. Mr. Fox performs the operations 1, 2, 3, and 4 in order. For each operation, A = 1, B = 5, C = 0, D = 0. He first adds 0 socks to the bins, then removes all 15 socks, then counts the 0 remaining socks, and then counts 0 odd bins, for a total of 15.

The third collection also has 5 bins with 1, 2, 3, 4, and 5 socks. Mr. Fox performs the same operations, but this time C and D take on the values 1, 2, 3, and 4 in that order. He adds 15 socks to the bins, then removes all 30 socks and adds 2 socks to each bin, then counts those 10 socks, and then counts 0 odd bins. The total is then 15 + 30 + 10 + 10 = 65.

Example input
5
5 4
0 0 0 0 0
1 2 0 1 0
1 1 0 0 0
1 1 0 0 0
0 0 0 0 0
0 0 0 0 0
5 4
1 2 0 1 1
1 2 0 1 0
1 1 0 0 0
5 5 0 1 4
0 0 0 0 0
0 0 0 0 0
5 4
1 2 0 1 1
1 2 0 1 0
1 1 0 0 0
5 5 0 1 4
1 2 0 1 1
1 2 0 1 1
5 2
1 2 0 1 1
4 4 0 0 0
1 1 0 0 0
5 5 0 0 0
0 0 0 0 0
0 0 0 0 0
100 100
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5

Example output
Case #1: 0
Case #2: 15
Case #3: 65
Case #4: 6
Case #5: 505274484